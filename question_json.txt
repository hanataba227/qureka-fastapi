## 문제 유형별 JSON 구조

### 1. n지 선다형(multiple_choice)

```json
{
  "questions": [
    {
      "question_text": "다음 중 객체 지향 프로그래밍의 특징이 아닌 것은?",
      "options": [
        {"id": "A", "text": "캡슐화"},
        {"id": "B", "text": "다형성"},
        {"id": "C", "text": "순차적 실행"},
        {"id": "D", "text": "상속"}
      ],
      "correct_answer": "C",
      "explanation": "객체 지향 프로그래밍의 주요 특징은 캡슐화, 다형성, 상속입니다. 순차적 실행은 절차적 프로그래밍의 특징입니다."
    }
  ]
}
```

### 2. 순서 배열형(sequence)

```json
{
  "questions": [
    {
      "question_text": "소프트웨어 개발 생명주기(SDLC)의 단계를 올바른 순서로 배열하세요.",
      "items": [
        {"id": 1, "text": "요구사항 분석"},
        {"id": 2, "text": "설계"},
        {"id": 3, "text": "구현"},
        {"id": 4, "text": "테스트"},
        {"id": 5, "text": "유지보수"}
      ],
      "correct_sequence": [1, 2, 3, 4, 5],
      "explanation": "소프트웨어 개발 생명주기는 요구사항 분석, 설계, 구현, 테스트, 유지보수 순으로 진행됩니다."
    }
  ]
}
```

### 3. 참거짓형(true_false)

```json
{
  "questions": [
    {
      "question_text": "Python은 컴파일 언어이다.",
      "correct_answer": false,
      "explanation": "Python은 인터프리터 언어이며, 코드가 실행 시간에 해석됩니다. 컴파일 언어는 실행 전에 전체 코드가 기계어로 변환됩니다."
    }
  ]
}
```

### 4. 빈칸 채우기형(fill_in_the_blank)

```json
{
  "questions": [
    {
      "question_text": "데이터베이스에서 ____ 는 중복된 데이터를 제거하고 데이터 일관성을 유지하는 과정이다.",
      "blanks": [
        {
          "id": 1,                  // 빈칸 고유 식별자 (여러 빈칸이 있을 경우 구분용)
          "position": "____",       // 빈칸의 위치를 나타내는 텍스트 마커
          "correct_answer": "정규화", // 빈칸에 들어갈 정답
          "options": [             // 객관식 형태로 제공될 선택지들
            {"id": "A", "text": "정규화"},
            {"id": "B", "text": "인덱싱"},
            {"id": "C", "text": "트랜잭션"},
            {"id": "D", "text": "쿼리 최적화"}
          ]
        }
      ],
      "explanation": "정규화는 관계형 데이터베이스 설계 시 중복을 최소화하고 데이터 무결성을 보장하기 위한 과정입니다."
    }
  ]
}
```

### 5. 단답형(short_answer)

```json
{
  "questions": [
    {
      "question_text": "HTTP 상태 코드 404가 의미하는 것은 무엇인가?",
      "correct_answer": "Not Found",           // 주요 정답 (기본 정답)
      "alternative_answers": [                 // 동의어나 대체 가능한 정답들 (부분점수 처리 가능)
        "찾을 수 없음", 
        "페이지를 찾을 수 없음", 
        "리소스 없음"
      ],
      "case_sensitive": false,                 // 대소문자 구분 여부 (false면 대소문자 구분하지 않음)
      "explanation": "HTTP 상태 코드 404는 클라이언트가 요청한 리소스를 서버에서 찾을 수 없음을 의미합니다."
    }
  ]
}
```

### 6. 서술형(descriptive)

```json
{
  "questions": [
    {
      "question_text": "REST API의 주요 원칙과 장점에 대해 설명하시오.",
      "answer_keywords": [                     // 채점에 사용될 핵심 키워드 목록
        "상태 비저장", 
        "인터페이스 일관성", 
        "클라이언트-서버 구조", 
        "계층화", 
        "캐시 가능성"
      ],
      "model_answer": "REST API는 Representational State Transfer의 약자로, 웹 서비스 설계를 위한 아키텍처 스타일입니다. 주요 원칙으로는 상태 비저장(Stateless), 인터페이스 일관성, 클라이언트-서버 구조, 계층화된 시스템, 캐시 가능성 등이 있습니다. 이러한 원칙을 통해 확장성, 유연성, 독립성이 향상되며 서비스 간 통합이 용이해집니다.",  // 모범 답안 (채점 기준이 됨)
      "explanation": "REST API의 원칙을 이해하고 이를 통한 장점을 설명하는 것이 중요합니다. 상태 비저장, 인터페이스 일관성, 클라이언트-서버 구조, 계층화, 캐시 가능성 등의 핵심 개념이 포함되어야 합니다."
    }
  ]
}

